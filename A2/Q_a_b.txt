Student Name: Mingming Zhang
COMP352 Section (AB)
Assignment # 2

***a) according to the outline
Amortized time complexity for adding any element to the stacks cannot be more than O(1); 
Space complexity can NOT be more than the exact number of items that you finally pushed into the stack (i.e. exactly O(n) for n elements).

I think about using ArrayList at first since it is more dynamic. However, since we are not allowed to use any build-in type, we can use array and resize it every time when it is full.The logic is similar with ArrayList internal resizing logic, we double the size when the current array is full and then copy the old one to new array. 

By using array, it is O(1) for pushing and popping operations and O(n) for resizing. Since resizing happens infrequently, the amortized time complexity remains O(1). 
In general,total space used is O(n), where n is the number of elements pushed into the stack.

***Pseudo code for implementing stack: 
Algorithm DynamicArrayStack
    Input: None
    Output: A stack implementation using a dynamic array

    // Initialize the stack with an empty array
    Stack ← array of size initial_capacity
    top ← -1

    Function push(element)
        if top = length(Stack) - 1 then
            // Double the size if it's full
            newStack ← array of size 2 * length(Stack)
            for i = 0 to length(Stack) - 1 do
                newStack[i] ← Stack[i]
            Stack ← newStack
        top ← top + 1
        Stack[top] ← element

    Function pop()
        if top = -1 then
            throw "Stack is empty"
        element ← Stack[top]
        top ← top - 1
        return element

    Function peek()
        if top = -1 then
            throw "Stack is empty"
        return Stack[top]

    Function isEmpty()
        return top = -1

    Function size()
        return top + 1

We implement methods for both input integer and String and name them push(int) and pushString(String). The logic is the same just input argument type is different.

***Pseudocode for Arithmetic Calculator Using Custom Stack:
Algorithm ArithmeticCalculator(expression)
    Input: A string expression containing a syntactically correct arithmetic expression
    Output: The computed result of the expression

    // Define operator precedence
    Function precedence(op: string)
        if op = "+" or op = "-" then
            return 1
        else if op = "*" or op = "/" then
            return 2
        else if op = "^" then
            return 3
        else if op = ">" or op = ">=" or op = "<" or op = "<=" then
            return 4
        else if op = "==" or op = "!=" then
            return 5
        else
            return 0

    // Perform arithmetic operations
    Function applyOp(a: integer, b: integer, op: string)
        if op = "+" then
            return a + b
        else if op = "-" then
            return a - b
        else if op = "*" then
            return a * b
        else if op = "/" then
            if b = 0 then
                throw "Cannot divide by zero"
            return a / b
        else if op = "^" then
            return a ^ b
        else if op = ">" then
            return a > b ? 1 : 0
        else if op = ">=" then
            return a >= b ? 1 : 0
        else if op = "<" then
            return a < b ? 1 : 0
        else if op = "<=" then
            return a <= b ? 1 : 0
        else if op = "==" then
            return a = b ? 1 : 0
        else if op = "!=" then
            return a ≠ b ? 1 : 0

    // Initialize stacks for operators and operands
    operators ← new DynamicArrayStack(initial_capacity)
    operands ← new DynamicArrayStack(initial_capacity)

    // Evaluate the expression
    for i = 0 to length(expression) - 1 do
        c ← expression[i]

        if c = " " then
            continue

        if isDigit(c) then
            num ← 0
            while i < length(expression) and isDigit(expression[i]) do
                num ← num * 10 + (expression[i] - '0')
                i ← i + 1
            operands.push(num)
            i ← i - 1

        else if c = "(" then
            operators.pushString("(")

        else if c = ")" then
            while operators.peekString() ≠ "(" do
                val2 ← operands.pop()
                val1 ← operands.pop()
                op ← operators.popString()
                operands.push(applyOp(val1, val2, op))
            operators.popString()

        else if isOperator(c) then
            op ← String(c)
            if (c = "=" or c = "!" or c = ">" or c = "<") and i + 1 < length(expression) and expression[i + 1] = "=" then
                op ← op + expression[i + 1]
                i ← i + 1

            while not operators.isEmpty() and precedence(operators.peekString()) >= precedence(op) do
                val2 ← operands.pop()
                val1 ← operands.pop()
                op ← operators.popString()
                operands.push(applyOp(val1, val2, op))
            operators.pushString(op)

    while not operators.isEmpty() do
        val2 ← operands.pop()
        val1 ← operands.pop()
        op ← operators.popString()
        operands.push(applyOp(val1, val2, op))

    return operands.pop()
        
----------------------------------------------------------------------------------------
***b)
Time complexity:
The method processes each character in the expression exactly once, resulting in an overall time complexity of O(n), where n is the length of the expression.
Each character might generate operations on the stack, but these operations (push, pop, peek) are constant time operations O(1).
All other operations(e.g. precedence, whitespace check, apply operator) are O(1)

Space complexity:
Stack Space: The space complexity for the stack is O(n) in the worst case where n is the length of the expression. Resizing the stack is an O(n) operation,
but it happens infrequently and is amortized over multiple operations.
The auxiliary space used for variables and operations within methods is O(1)

Overall, both the time and space complexity of the solution are O(n)
----------------------------------------------------------------------------------------